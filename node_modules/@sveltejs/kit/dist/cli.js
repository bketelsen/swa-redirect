'use strict';

var sade = require('sade');
var index = require('./index.js');
require('path');
require('module');
require('url');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
	if (e && e.__esModule) return e;
	var n = Object.create(null);
	if (e) {
		Object.keys(e).forEach(function (k) {
			if (k !== 'default') {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () {
						return e[k];
					}
				});
			}
		});
	}
	n['default'] = e;
	return Object.freeze(n);
}

var sade__default = /*#__PURE__*/_interopDefaultLegacy(sade);

var version = "1.0.0-next.26";

function get_config() {
	try {
		return index.load_config();
	} catch (error) {
		let message = error.message;

		if (error.code === 'ENOENT') {
			message = 'Missing svelte.config.js';
		} else if (error.name === 'SyntaxError') {
			message = 'Malformed svelte.config.js';
		}

		console.error(index.$.bold().red(message));
		console.error(index.$.grey(error.stack));
		process.exit(1);
	}
}

function handle_error(error) {
	console.log(index.$.bold().red(`> ${error.message}`));
	console.log(index.$.gray(error.stack));
	process.exit(1);
}

async function launch(port) {
	const { exec } = await Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('child_process')); });
	exec(`${process.platform == 'win32' ? 'start' : 'open'} http://localhost:${port}`);
}

const prog = sade__default['default']('svelte').version(version);

prog
	.command('dev')
	.describe('Start a development server')
	.option('-p, --port', 'Port', 3000)
	.option('-o, --open', 'Open a browser tab', false)
	.action(async ({ port, open }) => {
		process.env.NODE_ENV = 'development';
		const config = get_config();

		const { dev } = await Promise.resolve().then(function () { return require('./index2.js'); });

		try {
			const watcher = await dev({ port, config });

			watcher.on('stdout', (data) => {
				process.stdout.write(data);
			});

			watcher.on('stderr', (data) => {
				process.stderr.write(data);
			});

			console.log(index.$.bold().cyan(`> Listening on http://localhost:${watcher.port}`));
			if (open) launch(watcher.port);
		} catch (error) {
			handle_error(error);
		}
	});

prog
	.command('build')
	.describe('Create a production build of your app')
	.action(async () => {
		process.env.NODE_ENV = 'production';
		const config = get_config();

		const { build } = await Promise.resolve().then(function () { return require('./index3.js'); });

		try {
			await build(config);
		} catch (error) {
			handle_error(error);
		}
	});

prog
	.command('start')
	.describe('Serve an already-built app')
	.option('-p, --port', 'Port', 3000)
	.option('-o, --open', 'Open a browser tab', false)
	.action(async ({ port, open }) => {
		process.env.NODE_ENV = 'production';
		const config = get_config();

		const { start } = await Promise.resolve().then(function () { return require('./index4.js'); });

		try {
			await start({ port, config });

			console.log(index.$.bold().cyan(`> Listening on http://localhost:${port}`));
			if (open) if (open) launch(port);
		} catch (error) {
			handle_error(error);
		}
	});

prog
	.command('adapt')
	.describe('Customise your production build for different platforms')
	.action(async () => {
		process.env.NODE_ENV = 'production';
		const config = get_config();

		const { adapt } = await Promise.resolve().then(function () { return require('./index6.js'); });

		try {
			await adapt(config);
		} catch (error) {
			handle_error(error);
		}
	});

prog.parse(process.argv, { unknown: (arg) => `Unknown option: ${arg}` });
//# sourceMappingURL=cli.js.map
